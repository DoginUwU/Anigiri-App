<%
  /*var animes;
  if (T.VALUE === "pt-br") {
    animes = JSON.parse(JSON.stringify(ptBR_animes))
  } else {
    animes = JSON.parse(JSON.stringify(enUS_animes))
  }
  var anime = animes.find(x => x._id === id);

  if (anime.movie) episode = 1
  anime.eplabel = Object.getOwnPropertyNames(anime.episodes || {});*/

%>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Watch </title>
  <script>if (typeof module === 'object') {window.module = module; module = undefined;}</script>
    <link rel="stylesheet" href="https://cdn.fluidplayer.com/v2/current/fluidplayer.min.css" type="text/css"/>
    <script src="https://cdn.fluidplayer.com/v2/current/fluidplayer.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js" async defer></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/components/search.min.js" async defer></script>
    <script src="https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"></script>
    <script src="https://polyfill.io/v2/polyfill.min.js?features=IntersectionObserver"></script>
    <script src="https://kit.fontawesome.com/4d033f0668.js" crossorigin="anonymous"></script>

    <!--<script src="/js/yall.min.js"></script>
    <script src="/js/client.js" defer></script>-->
    <link rel="stylesheet" href="./css/style.css">

    <script>if (window.module) module = window.module;</script>

    <style>
      *{
        overflow: hidden;
      }
      body{
        overflow: hidden;
      }
      .menuicon{
        display: none;
      }
    </style>
</head>
<body>
  <%- include("./partials/header") %>
  <script asnyc defer>
    var dlnacasts = require('dlnacasts2')();
    var urlParams = new URLSearchParams(window.location.search);
    var url = urlParams.get('video');
    var episode = urlParams.get('episode');
    var id = urlParams.get('id');
    //const ejse = require('ejs-electron')
    const mongoose = require("mongoose");
    var MediaRendererClient = require('upnp-mediarenderer-client');
    var fs = require('fs');
    var ip = require('ip');
    const express = require('express')
    const app = express() ;
    const request = require('request');
    var ffmpeg = require('ffmpeg');
    const Store = require('electron-store');
    const store = new Store();
    var players;
    var animes;
    var client = null;

    <%
      var animes;
      animes = JSON.parse(JSON.stringify(ptBR_animes));
        try {
          animes.sort(function(a, b) {
          if (a.name < b.name) {
            return -1;
          }
          if (a.name > b.name) {
            return 1;
          }
            return 0;
         })
        } catch (error) {
          console.log("err");
        }
        animes2 = JSON.stringify(animes);
    %>

      animes = <%- animes2 %>;

      var anime = animes.find(x => x._id === id);

      var episodes = JSON.parse(JSON.stringify(anime.episodes));
      var newTitle = (episodes[episode].title ? ' - ' + episodes[episode].title : '')

      if(episodes[episode].video == "" || episodes[episode].video == undefined)
        alert("error");

   
        
    function nextEpisode(){
      var newEp = (Number(episode) + 1);
      console.log("./watch.ejs?video=" + episodes[newEp].video + "&episode=" + newEp + "&id=" + anime._id);
      window.location.href = "./watch.ejs?video=" + episodes[newEp].video + "&episode=" + newEp + "&id=" + anime._id;
    }

    setInterval(function (){
      if($('.fade_out').length == 0 || $('.exit').is(":hover") || $('.tv').is(":hover") || $('.next-ep').is(":hover")){
        $('.hideOnPlayer').css('display', 'block');
      }else{
        $('.hideOnPlayer').css('display', 'none');
      }

      $("#fluid_video_wrapper_player").css("height", "97.5%")
      $("#fluid_video_wrapper_player").css("width", "100%")
      $("#fluid_video_wrapper_player").css("margin-top", "20px")

      $('#menuicon').css("display", "none");

      $(".fp_title").css("top", "60px")
      $(".fp_title").css("left", "20px")

      if(players == undefined)
        $('.tv').css('display', 'none');
      else
        $('.tv').css('display', 'block');
    }, 500)

    setInterval(function(){
      dlnacasts.update();
    }, 1000);

    dlnacasts.on('update', function (player) {
        players = dlnacasts.players;
        reloadTVS();
      })  

    function showTV(){
      
      $('.tvs').toggle();
      reloadTVS();
    }

    function reloadTVS(){
      $('.tvs').html('');
          
      for(var i in players){
        $('.tvs').append("<p onclick='SendToTV(this)' data-value=" + i + ">" + players[i].name + "</p>")
      }
    }

    var segments = 0;
    var totalSegments = 0;
    var downloaded = 0;
    var downloadedIsFinish = false;
    var fileSize = 0;
    var statusTV;
    const m3u8stream = require('m3u8stream');
    var fs = require("fs");
    var stream;
    var checkSizeFileStream;
    var share = false;
    var currentTV;
    var currentTVID;

    function cancelTV(){
      fs.unlinkSync(__dirname + "/temp/"+ anime._id +".mp4");
      segments = 0;
      totalSegments = 0;
      downloaded = 0;
      downloadedIsFinish = false;
      fileSize = 0;
      statusTV = "";
      stream.end();
      share = false;
      stream = null;
      currentTV= null;
      currentTVID = 0;
      clearInterval(checkSizeFileStream);
    }

    async function SendToTV(e){
      if(share) return;
      var id = e.getAttribute("data-value");
      var url_video = episodes[episode].video;
      var link = url_video.replace("playlist", "chunk");

      console.log(players[id]);
      currentTV = players[id];
      currentTVID = id;

      showInfoTV();

      var title = anime.name;

      if(anime.episodes[episode].video.slice(anime.episodes[episode].video.lastIndexOf(".")) == ".m3u8"){
        var fileExists;
        fs.access(__dirname + "/temp/"+ anime._id +".mp4", fs.F_OK, (err) => {
          if (err) {
            fileExists = false;
            return;
          }
          fileExists = true;
        });

        if(fileExists){
          setInterval(function(){
            var stats = fs.statSync(__dirname + "/temp/"+ anime._id +".mp4");
            var fileSizeInBytes = stats["size"];
            fileSize = fileSizeInBytes / 1000000.0;
          }, 500)
          if(fileSize > 10){
            downloadedIsFinish = true;
            statusTV = "Iniciando TV";
            return runVideoInternal(id);
          }
          else{
            downloadedIsFinish = false;
            statusTV = "";
            return fs.unlinkSync(__dirname + "/temp/"+ anime._id +".mp4");
          }
        }else{
          checkSizeFileStream = setInterval(function(){
            var stats = fs.statSync(__dirname + "/temp/"+ anime._id +".mp4");
            var fileSizeInBytes = stats["size"];
            fileSize = fileSizeInBytes / 1000000.0;
          }, 500)

          stream = m3u8stream(link, {
            parser: "m3u8",
            highWaterMark: 100
          });
            stream.pipe(fs.createWriteStream(__dirname + "/temp/"+ anime._id +".mp4"));

            stream.on('progress', (segment, totalSegments, downloaded) => {
              this.segments = segment.num;
              this.totalSegments = totalSegments;
              this.downloaded = downloaded;

              if(!share){
                if(store.get("MBtoWaitForConnectOnTV") > 0 && (downloaded / 1024 / 1024).toFixed(2) > store.get("MBtoWaitForConnectOnTV") ){
                  runVideoInternal(id);
                  share = true;
                  $('#conTVButton').show();
                }else if(store.get("MBtoWaitForConnectOnTV") > 0){
                  $('#conTVButton').hide();
                }else if(store.get("MBtoWaitForConnectOnTV") == 0){
                  $('#conTVButton').show();
                }
              }

              console.log(
                `${segment.num} of ${totalSegments} segments ` +
                `(${(segment.num / totalSegments * 100).toFixed(2)}%) ` +
                `${(downloaded / 1024 / 1024).toFixed(2)}MB downloaded`);
            });
          setInterval(function(){
            if(!downloadedIsFinish && totalSegments > 10 && segments >= totalSegments){
              downloadedIsFinish = true;
              if(!share){
                runVideoInternal(id);
                $('#conTVButton').show();
              }
            }
            /*if(!downloadedIsFinish && segments >= totalSegments)
              console.log("%c Download Concluido!! Aguarde a compilação dos arquivos!", "color: green; background-color: black;");
              if(share){
                downloadedIsFinish = true;
                return;
              }
              runVideoInternal(id)
              downloadedIsFinish = true;*/
          }, 1000);
        }
      }else{
          //request(episodes[episode].video).pipe(fs.createWriteStream(__dirname + '/temp/anime.m3u8'))
          app.get('/', async function (req, res) {
            const x = request(episodes[episode].video)
            req.pipe(x)
            x.pipe(res)
          })
          SendFileToTV(id);
      }  
    }

    function runVideoInternal(id){
      if(share) return;
      app.get('/', async function (req, res) {
          const path = __dirname + "/temp/"+ anime._id +".mp4";
          const stat = fs.statSync(path)
          const fileSize = stat.size
          const range = req.headers.range
          if (range) {
            const parts = range.replace(/bytes=/, "").split("-")
            const start = parseInt(parts[0], 10)
            const end = parts[1] 
              ? parseInt(parts[1], 10)
              : fileSize-1
            const chunksize = (end-start)+1
            const file = fs.createReadStream(path, {start, end})
            const head = {
              'Content-Range': `bytes ${start}-${end}/${fileSize}`,
              'Accept-Ranges': 'bytes',
              'Content-Length': chunksize,
              'Content-Type': 'video/mp4',
            }
            res.writeHead(206, head);
            file.pipe(res);
          } else {
            const head = {
              'Content-Length': fileSize,
              'Content-Type': 'video/mp4',
            }
            res.writeHead(200, head)
            fs.createReadStream(path).pipe(res)
          }
      })

      SendFileToTV(id);
    }

    function connectTV(){
      share = false;
      SendFileToTV(currentTVID);
      share = true;
    }

    function SendFileToTV(id){
      if(share) return;
      client = new MediaRendererClient(players[id].xml);
      var options = { 
        autoplay: true,
        contentType: 'video/mp4',
        metadata: {
          title: anime.name + newTitle,
          creator: 'Anigiri',
          type: 'video', // can be 'video', 'audio' or 'image'
        }
      };  

      client.load('http://'+ ip.address() +':3000', options, function(err, result) {
        if(err){
          console.log("%c " + err, 'color: red;');
          players[id].play('http://'+ ip.address() +':3000', {title: anime.name + newTitle, type: 'video/mp4'})
          if(!err.includes("locked"))
            SendFileToTV(id);
          return
        }
        console.log('playing ...');
        share = true;
      });

        client.on('status', function(status) {
          var err = JSON.stringify(status);
          console.log("%c TV STATUS: " + err, 'color: green;');
        });

        client.on('loading', function() {
          console.log('%c loading tv', 'color: green;');
        });
        client.on('playing', function() {
          console.log('%c playing tv', 'color: green;');
        });
    }

    $(window).on('load', function() {
      dlnacasts.update();

      const server_ = app.listen(3000)

      console.log(store.get("MBtoWaitForConnectOnTV"));

      app.get('/close', function (req, res) {
        server_.close();
        res.send("server closed");
      })  

      $("source").attr("src", episodes[episode].video);

      if(Object.keys(episodes).length == Number(episode)){
        $('.next-ep').css('display', 'none!important');
        document.getElementById("next-ep").style.display = "none";
      }

      if(episodes[episode].video.includes("m3u8")){
        $("source").attr("type", "application/x-mpegURL");
      }

      

      var myFluidPlayer = fluidPlayer("player", {
          layoutControls: {
          title: anime.name + newTitle,
          fillToContainer: false,
          primaryColor: "#6435c9",
          autoPlay: false,
          preload: true,
          playButtonShowing: true,
          playPauseAnimation: true,
          playbackRateEnabled: false,
          mute: false,
          logo: {
            imageUrl: '',
            position: 'top left',
            clickUrl: null,
            opacity: 1,
            mouseOverImageUrl: null,
            imageMargin: '2px',
            hideWithControls: false,
            showOverAds: false
          },
          htmlOnPauseBlock: {
            html: null,
            height: null,
            width: null
          },
          layoutControls: {
            captions: {
                play: 'Play',
                pause: 'Pause',
                mute: 'Mute',
                unmute: 'Unmute',
                fullscreen: 'Fullscreen',
                exitFullscreen: 'Exit Fullscreen',
                miracast: 'Miracast'
            },
            title: anime.name
          },
          allowDownload: false,
          allowTheatre: false,
          playbackRateEnabled: true,
          controlBar: {
            autoHide: true,
            autoHideTimeout: 3,
            animated: true
		      },
            },
            
        });

        myFluidPlayer.on('ended', event => {
          
        });
        myFluidPlayer.on('pause', event => {
          $('#player_fluid_state_button').css("margin-left", "17px");
        });
        
        myFluidPlayer.on('play', event => {
          $('#player_fluid_state_button').css("margin-left", "23px");
        });


    });
  </script>
   <video id="player" style="width: 100%; height: 97.5%"> 
    <source id="source" src="" type="video/mp4"/> 
  </video>
  <div class="statusToTV" id="statusToTV">
    <div class="content" id="contentStatusTV">
      <h2>Aguarde!</h2>
      
      <script>
        function showInfoTV(){
          if(currentTV != null){
            $('#contentStatusTV').append("<p>Detectamos que este anime não é compativel com sua tv ("+ currentTV.name +"), estaremos relizando a conversão do arquivo para .mp4!</p>" +
            "<div class='ui indicating progress' id='progress'>" +
            "<div class='bar' style='width: 600px'><div class='progress' style='background: transparent; margin-top: 1px'></div></div>" + 
            "<div class='label' style='position: relative; color: #FFF'></div>" +
            "</div>" + 
            "<p id='textStatusTV' style='position: absolute; top: 75%; left: 50%; transform: translate(-50%, -50%)'></p>"
            );
          }
        }
      </script>
      <button onclick="cancelTV()" class="ui orange button" style='position: absolute; bottom: 0; left: 0; margin: 30px;'>Cancelar</button>
      <button onclick="connectTV()" class="ui positive button" id="conTVButton" style='position: absolute; bottom: 0; right: 0; margin: 30px;'>Conectar com a tv</button>
      </div>

    </div>
    <script>
        setInterval(function(){
          $('#textStatusTV').text(statusTV);
          if(totalSegments > 0){
            $('.statusToTV').show();
            var percentual = (segments / totalSegments * 100);

            if(Number(segments) < Number(totalSegments)){
              statusTV = "(Sua tv está iniciando) Baixando partes do video: [" + segments + " / " + totalSegments + "]";
            }else{
              if(Number(segments) >= Number(totalSegments)){
                if(fileSize >= (downloaded / 1024 / 1024).toFixed(2)){
                  statusTV = "Iniciando TV";
                  downloadedIsFinish = true;
                }else{
                  statusTV = "Compilando arquivo .mp4"
                }
              }
            }

          $('#progress').progress({
              percent: percentual
            });
          }else{
            statusTV = "Carregando...";
            $('.statusToTV').hide();
          }
        }, 1000);
    </script>
    
  </div>
  <div class="hideOnPlayer" id="hideOnPlayer">
    <a href="./index.ejs"><div class="exit"><i class="fas fa-times fa-2x"></i></div></a>
    <div class="next-ep" id="next-ep" onclick="nextEpisode()"><i class="fas fa-arrow-right fa-2x"></i></div>
    <div class="tv" onclick="showTV()">
      <i class="fas fa-tv fa-2x"></i>
      <div class="tvs">
      </div>
    </div>
  </div>
</body>
</html>